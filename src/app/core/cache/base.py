from __future__ import annotations

from typing import Any, Protocol, runtime_checkable


class CacheError(Exception):
    pass


@runtime_checkable
class CacheBackend(Protocol):
    async def get(self, key: str) -> Any | None: ...
    async def set(self, key: str, value: Any, ttl: int | None = None) -> bool: ...

    async def delete(self, *keys: str) -> int: ...
    async def exists(self, *keys: str) -> int: ...
    async def expire(self, key: str, seconds: int) -> bool: ...
    async def incr(self, key: str, amount: int = 1) -> int: ...
    async def decr(self, key: str, amount: int = 1) -> int: ...
    async def hset(self, name: str, key: str, value: Any) -> int: ...
    async def hget(self, name: str, key: str) -> Any | None: ...
    async def hgetall(self, name: str) -> dict[str, Any]: ...
    async def lpush(self, key: str, *values: Any) -> int: ...
    async def rpop(self, key: str, count: int | None = None) -> Any: ...
    async def invalidate(self, pattern: str | None = None) -> int: ...
    async def aclose(self) -> None: ...
